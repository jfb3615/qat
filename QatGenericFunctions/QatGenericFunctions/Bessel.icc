//---------------------------------------------------------------------------//
// !!                                                                     !! //
//                                                                           //
//  Copyright (C) 2016 Joe Boudreau                                          //
//                                                                           //
//  This file is part of the QAT Toolkit for computational science           //
//                                                                           //
//  QAT is free software: you can redistribute it and/or modify              //
//  it under the terms of the GNU Lesser General Public License as           //
//  published by the Free Software Foundation, either version 3 of           //
//  the License, or (at your option) any later version.                      //
//                                                                           //
//  QAT is distributed in the hope that it will be useful,                   //
//  but WITHOUT ANY WARRANTY; without even the implied warranty of           //
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            //
//  GNU Lesser General Public License for more details.                      //
//                                                                           //
//  You should have received a copy of the GNU Lesser General Public         //
//  License along with QAT.  If not, see <http://www.gnu.org/licenses/>.     //
//                                                                           //
//---------------------------------------------------------------------------//

#include "QatGenericFunctions/FixedConstant.h"
#include "gsl/gsl_sf_bessel.h"
#include <cmath>
#include <stdexcept>
#include <sstream>
#include <iostream>

namespace Genfun {
  namespace IntegralOrder {
    
    FUNCTION_OBJECT_IMP_INLINE(Bessel)
    
    inline
    Bessel::Bessel(unsigned int n, Type type):
    _type(type),_n(n)
    {
    }
    
    inline
    Bessel::~Bessel() {
    }
    
    inline
    Bessel::Bessel(const Bessel & right):
      _type(right._type),
      _n(right._n)
    {
    }
    
    inline
    double Bessel::operator() (double x) const {
      gsl_sf_result result;
      if (_type==FirstKind) {
	int status = gsl_sf_bessel_Jn_e(_n, x,  &result);
	if (status!=0) {
	  std::ostringstream stream;
	  stream << "Warning, GSL function gsl_sf_bessel_Jn_impl" 
		 << " return code " << status << std::endl;
	  throw std::runtime_error(stream.str());
	}
	return result.val;
      }
      else if (_type==SecondKind) {
	int status = gsl_sf_bessel_Yn_e(_n, x,  &result);
	if (status!=0) {
	  std::ostringstream stream;
	  stream << "Warning, GSL function gsl_sf_bessel_Yn_impl" 
		 << " return code " << status << std::endl;
	  throw std::runtime_error(stream.str());
	}
	return result.val;
      }
      else if (_type==ModifiedFirstKind) {
	int status = gsl_sf_bessel_In_e(_n, x,  &result);
	if (status!=0) {
	  std::ostringstream stream;
	  stream << "Warning, GSL function gsl_sf_bessel_In_impl" 
		 << " return code " << status << std::endl;
	  throw std::runtime_error(stream.str());
	}
	return result.val;
      }
      else if (_type==ModifiedSecondKind) {
	int status = gsl_sf_bessel_Kn_e(_n, x,  &result);
	if (status!=0) {
	  std::ostringstream stream;
	  stream << "Warning, GSL function gsl_sf_bessel_Kn_impl" 
		 << " return code " << status << std::endl;
	  throw std::runtime_error(stream.str());
	}
	return result.val;
      }
      else {
	return 0;
      }
    }
    
    Derivative Bessel::partial(unsigned int index) const {
      if (index!=0) throw std::range_error("Bessel: partial derivative index out of range");

      if (_n==0) {
	if (_type==FirstKind || _type==SecondKind || _type==ModifiedSecondKind) {
	  const AbsFunction & fPrime =  -Bessel(_n+1,_type);
	  std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
	  return Derivative(deriv);
	}
	else if (_type==ModifiedFirstKind) {
	  const AbsFunction & fPrime =  Bessel(_n+1,_type);
	  std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
	  return Derivative(deriv);
	}
	else {
          // Should never happen. 
          throw std::logic_error("Bessel::Unknown type");	
	  const AbsFunction & fPrime=FixedConstant(0.0);
	  std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
	  return Derivative(deriv);	
        }
      }
      else {
	if (_type==FirstKind || _type==SecondKind) {
	  const AbsFunction & fPrime =  0.5*(Bessel(_n-1, _type)-Bessel(_n+1,_type));
	  std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
	  return Derivative(deriv);
	}
	else if (_type==ModifiedFirstKind) {
	  const AbsFunction & fPrime =  0.5*(Bessel(_n-1, _type)+Bessel(_n+1,_type));
	  std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
	  return Derivative(deriv);
	}
	else if (_type==ModifiedSecondKind) { 
	  const AbsFunction & fPrime =  -0.5*(Bessel(_n-1, _type)+Bessel(_n+1,_type));
	  std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
	  return Derivative(deriv);
	}
	else {
          // Should never happen. 
          throw std::logic_error("Bessel::Unknown type");	
	  const AbsFunction & fPrime=FixedConstant(0.0);
	  std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
	  return Derivative(deriv);	
	}
      }
    }
  } // end namespace IntegralOrder

namespace FractionalOrder {

FUNCTION_OBJECT_IMP_INLINE(Bessel)

inline
Bessel::Bessel(Type type):
  _type(type),
  _n("N", 0.0,-10,10)
{
}

inline
Bessel::~Bessel() {
}

inline
Bessel::Bessel(const Bessel & right):
  _type(right._type),
  _n(right._n)
{
}


inline
Parameter & Bessel::n() {
  return _n;
}

inline
const Parameter & Bessel::n() const {
  return _n;
}


inline
double Bessel::operator() (double x) const {
  gsl_sf_result result;
  if (_type==FirstKind) {
    int status = gsl_sf_bessel_Jnu_e(_n.getValue(), x,  &result);
    if (status!=0) {
      std::cerr << "Warning, GSL function gsl_sf_bessel_Jnu_impl" 
		<< " return code " << status << std::endl;
      
    }
    return result.val;
  }
  else if (_type==SecondKind) {
    int status = gsl_sf_bessel_Ynu_e(_n.getValue(), x,  &result);
    if (status!=0) {
      std::ostringstream stream;
      stream << "Warning, GSL function gsl_sf_bessel_Ynu_impl" 
		<< " return code " << status << std::endl;
      throw std::runtime_error(stream.str());
    }
    return result.val;
  }
  else if (_type==ModifiedFirstKind) {
    int status = gsl_sf_bessel_Inu_e(_n.getValue(), x,  &result);
    if (status!=0) {
      std::ostringstream stream;
      stream << "Warning, GSL function gsl_sf_bessel_Inu_impl" 
		<< " return code " << status << std::endl;
      throw std::runtime_error(stream.str());
    }
    return result.val;
  }
  else if (_type==ModifiedSecondKind) {
    int status = gsl_sf_bessel_Knu_e(_n.getValue(), x,  &result);
    if (status!=0) {
      std::ostringstream stream;
      stream << "Warning, GSL function gsl_sf_bessel_Knu_impl" 
	     << " return code " << status << std::endl;
      throw std::runtime_error(stream.str());
    }
    return result.val;
  }
  return result.val;
}
  

  Derivative Bessel::partial(unsigned int index) const {
    if (index!=0) throw std::range_error("Bessel: partial derivative index out of range");
    
    Bessel FP(_type), FM(_type);
    FP.n().setValue(n().getValue()+1);
    FM.n().setValue(n().getValue()-1);
    const AbsFunction & fPrime =   (_type==FirstKind || _type==SecondKind) ? 0.5*(FM-FP) :
      _type==ModifiedFirstKind ? 0.5*(FM+FP) : _type==ModifiedSecondKind ? -0.5*(FM+FP) : 0.5*FixedConstant(0.0);
    return Derivative(& fPrime);
  }


} // end namespace FractionalOrder

} // end namespace Genfun
