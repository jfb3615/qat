//---------------------------------------------------------------------------//
// !!                                                                     !! //
//                                                                           //
//  Copyright (C) 2016 Joe Boudreau                                          //
//                                                                           //
//  This file is part of the QAT Toolkit for computational science           //
//                                                                           //
//  QAT is free software: you can redistribute it and/or modify              //
//  it under the terms of the GNU Lesser General Public License as           //
//  published by the Free Software Foundation, either version 3 of           //
//  the License, or (at your option) any later version.                      //
//                                                                           //
//  QAT is distributed in the hope that it will be useful,                   //
//  but WITHOUT ANY WARRANTY; without even the implied warranty of           //
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            //
//  GNU Lesser General Public License for more details.                      //
//                                                                           //
//  You should have received a copy of the GNU Lesser General Public         //
//  License along with QAT.  If not, see <http://www.gnu.org/licenses/>.     //
//                                                                           //
//---------------------------------------------------------------------------//

#include "QatGenericFunctions/FixedConstant.h"
#include <gsl/gsl_sf_laguerre.h>
#include <cmath>
#include <sstream>
#include <stdexcept>


namespace Genfun {
  
  FUNCTION_OBJECT_IMP_INLINE(AssociatedLaguerrePolynomial)
  
  //
  inline
  AssociatedLaguerrePolynomial::AssociatedLaguerrePolynomial(unsigned int n, double a, NormalizationType type):
  AbsFunction(),
    _n(n),
    _a(a),
    _normType(type)
  {
  }
  
  inline
  AssociatedLaguerrePolynomial::~AssociatedLaguerrePolynomial() {
  }
  
  inline
  AssociatedLaguerrePolynomial::AssociatedLaguerrePolynomial(const AssociatedLaguerrePolynomial & right):
    AbsFunction(),
    _n(right._n),
    _a(right._a),
    _normType(right._normType)
  {
  }
  
  inline
  unsigned int AssociatedLaguerrePolynomial::n() const {
    return _n;
  }
  
  inline
  double AssociatedLaguerrePolynomial::a() const {
    return _a;
  }
  
  
  inline
  double AssociatedLaguerrePolynomial::operator() (double x) const {
    gsl_sf_result result;
    int status = -1;
    status=gsl_sf_laguerre_n_e    (_n, _a, x, &result);
    
    if (status!=0) {
      std::ostringstream stream;
      stream << "Warning, Error from gsl in AssociatedLaguerrePolynomial; " 
	     << " return code " << status << std::endl;
      throw std::runtime_error(stream.str());
    }
    return _normType==STD? result.val: result.val/exp(0.5*(lgamma(_n+_a+1)-lgamma(_n+1)));
  }
  inline
  Derivative AssociatedLaguerrePolynomial::partial(unsigned int index) const {
    if (index!=0) throw std::range_error("AssociatedLaguerrePolynomial: partial derivative index out of range");
    if (_n>0)  {
      const AbsFunction & fPrime = _normType==STD ? 
	-AssociatedLaguerrePolynomial(_n-1,_a+1,STD)
	:
	-(AssociatedLaguerrePolynomial(_n-1,_a+1,STD)/exp(0.5*(lgamma(_n+_a+1)-lgamma(_n+1))));
      std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
      return Derivative(deriv);
    }
    else {
      const AbsFunction & fPrime   = FixedConstant(0.0);
      std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
      return Derivative(deriv);
    }
  }
} // end namespace Genfun
