//---------------------------------------------------------------------------//
// !!                                                                     !! //
//                                                                           //
//  Copyright (C) 2016 Joe Boudreau                                          //
//                                                                           //
//  This file is part of the QAT Toolkit for computational science           //
//                                                                           //
//  QAT is free software: you can redistribute it and/or modify              //
//  it under the terms of the GNU Lesser General Public License as           //
//  published by the Free Software Foundation, either version 3 of           //
//  the License, or (at your option) any later version.                      //
//                                                                           //
//  QAT is distributed in the hope that it will be useful,                   //
//  but WITHOUT ANY WARRANTY; without even the implied warranty of           //
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            //
//  GNU Lesser General Public License for more details.                      //
//                                                                           //
//  You should have received a copy of the GNU Lesser General Public         //
//  License along with QAT.  If not, see <http://www.gnu.org/licenses/>.     //
//                                                                           //
//---------------------------------------------------------------------------//

#include "QatGenericFunctions/Polynomial.h"
#include "QatGenericFunctions/FixedConstant.h"
#include "Eigen/Dense"

namespace Genfun {

  FUNCTION_OBJECT_IMP_INLINE(Polynomial)
  
  // Constructor
  template <typename ConstIterator>
  Polynomial::Polynomial(ConstIterator begin, ConstIterator end) :
  _values(begin,end) {
  }
  
  // Initializer list constructor:
  inline
  Polynomial::Polynomial(std::initializer_list<double> values):
    _values(values)
  {
  }

  // Destructor
  inline
  Polynomial::~Polynomial(){}
  
  // Copy constructor
  inline
  Polynomial::Polynomial(const Polynomial &right):
    AbsFunction(right), _values(right._values) {}
  
  // Retreive function value
  inline
  double Polynomial::operator ()(double x) const {
    double retVal=0;
    for (auto i=_values.begin();i!=_values.end();i++) {
      if (i==_values.begin()) {
	retVal=*i;
      }
      else {
	retVal = retVal*x + *i;
      }
    }
    return retVal;
  }

  inline
  Derivative Polynomial::partial(unsigned int index) const {
    if (index!=0) throw std::range_error("Polynomial: partial derivative index out of range");
    std::vector<double> d=coefficientsOfDerivative();
    Polynomial fPrime(d.begin(),d.end());
    return Derivative(&fPrime);
  }
  
  // Get the roots of this polynomial:
  inline 
  std::vector<std::complex<double>> Polynomial::getRoots() const {
    std::vector<std::complex<double>> roots;
    Eigen::MatrixXd comp=getCompanionMatrix();
    Eigen::EigenSolver<Eigen::MatrixXd> solver(comp);
    for (int i=0;i<solver.eigenvalues().size();i++) {
      roots.push_back(solver.eigenvalues()(i));
    }
    return roots;
  }
  
  // Get the companion matrix of this polynomial:
  inline
  Eigen::MatrixXd Polynomial::getCompanionMatrix() const {
    Eigen::MatrixXd comp=Eigen::MatrixXd::Zero(_values.size()-1,_values.size()-1);
    for (int i=0;i<comp.rows();i++) {
      size_t lastCol=comp.cols()-1;
      comp(comp.rows()-i-1,lastCol)=-_values[i+1]/_values[0];	// The division is to make a monic polynomial
      if (i>0) comp(i,i-1)=1;
    }
    return comp;
  }

  std::vector<double> Polynomial::coefficientsOfDerivative() const {
    std::vector<double> d(_values.size()-1, 0.0);
    for (size_t i=0;i<_values.size()-1;i++) {
      d[i]=(_values.size()-i-1)*_values[i];
    }
    return d;
  }
}
