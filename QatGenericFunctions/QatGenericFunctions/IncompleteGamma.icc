//---------------------------------------------------------------------------//
// !!                                                                     !! //
//                                                                           //
//  Copyright (C) 2016 Joe Boudreau                                          //
//                                                                           //
//  This file is part of the QAT Toolkit for computational science           //
//                                                                           //
//  QAT is free software: you can redistribute it and/or modify              //
//  it under the terms of the GNU Lesser General Public License as           //
//  published by the Free Software Foundation, either version 3 of           //
//  the License, or (at your option) any later version.                      //
//                                                                           //
//  QAT is distributed in the hope that it will be useful,                   //
//  but WITHOUT ANY WARRANTY; without even the implied warranty of           //
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the            //
//  GNU Lesser General Public License for more details.                      //
//                                                                           //
//  You should have received a copy of the GNU Lesser General Public         //
//  License along with QAT.  If not, see <http://www.gnu.org/licenses/>.     //
//                                                                           //
//---------------------------------------------------------------------------//

#include "QatGenericFunctions/Power.h"
#include "QatGenericFunctions/FixedConstant.h"
#include "QatGenericFunctions/Variable.h"
#include "QatGenericFunctions/Exp.h"
#include <gsl/gsl_sf_gamma.h>
#include <cmath>
#include <sstream>
#include <stdexcept>


namespace Genfun {

FUNCTION_OBJECT_IMP_INLINE(IncompleteGamma)

//
inline
IncompleteGamma::IncompleteGamma(Type type):
  AbsFunction(),
  _type(type),
  _a("a-parameter", 5 ,0, HUGE_VAL) 
{
}

inline
IncompleteGamma::~IncompleteGamma() {
}

inline
IncompleteGamma::IncompleteGamma(const IncompleteGamma & right):
AbsFunction(),
_type(right._type),
_a(right._a)
{
}

inline
Parameter & IncompleteGamma::a() {
  return _a;
}


inline
const Parameter & IncompleteGamma::a() const {
  return _a;
}


    


inline
double IncompleteGamma::operator() (double x) const {
  gsl_sf_result result;
  int status = -1;
  if (_type==P) {
    status=gsl_sf_gamma_inc_P_e (_a.getValue(), x, &result);
  }
  else if (_type==Q) {
    status=gsl_sf_gamma_inc_Q_e (_a.getValue(), x, &result);
  }
  else if (_type==UPPER) {
    status=gsl_sf_gamma_inc_e    (_a.getValue(), x, &result);
  }
  else if (_type==LOWER) {
    status=tgamma(x)-gsl_sf_gamma_inc_e    (_a.getValue(), x, &result);
  }
  else {
    throw std::logic_error("Impossible condition in IncompleteGamma");
  }
  
  if (status!=0) {
    std::ostringstream stream;
    stream << "Warning, Error from gsl in IncompleteGamma; " 
	   << " return code " << status << std::endl;
    throw std::runtime_error(stream.str());
  }
  return result.val;
}

Derivative IncompleteGamma::partial(unsigned int index) const {
  if (index!=0) throw std::range_error("IncompleteGamma: partial derivative index out of range");
  if (_type==UPPER) {
    Variable X;
    const AbsFunction & fPrime = -Power(_a.getValue()-1)(X) * Exp()(-X);
    std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
    return Derivative(deriv);
  }
  else if (_type==LOWER) {
    Variable X;
    const AbsFunction & fPrime =  Power(_a.getValue()-1)(X) * Exp()(-X);
    std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
    return Derivative(deriv);
  }
  else if (_type==Q) {
    Variable X;
    const AbsFunction & fPrime = -Power(_a.getValue()-1)(X) * Exp()(-X)/tgamma(_a.getValue());
    std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
    return Derivative(deriv);
  }
  else if (_type==P) {
    Variable X;
    const AbsFunction & fPrime =  Power(_a.getValue()-1)(X) * Exp()(-X)/tgamma(_a.getValue());
    std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
    return Derivative(deriv);
  }
  else {
    const AbsFunction & fPrime =  FixedConstant(0.0);
    std::shared_ptr<const AbsFunction> deriv{fPrime.clone()};
    return Derivative(deriv);
  } 
}

} // end namespace Genfun
